//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpenseRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MDashExpenseEntities : DbContext
    {
        public MDashExpenseEntities()
            : base("name=MDashExpenseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ExpCategory> ExpCategories { get; set; }
        public virtual DbSet<ExpenseRecord> ExpenseRecords { get; set; }
        public virtual DbSet<ExpPersonalCategory> ExpPersonalCategories { get; set; }
        public virtual DbSet<ExpUser> ExpUsers { get; set; }
    
        public virtual int AddExpCategories(string name, Nullable<int> sortorder)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var sortorderParameter = sortorder.HasValue ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExpCategories", nameParameter, sortorderParameter);
        }
    
        public virtual int AddExpenseRecord(Nullable<System.Guid> ownerId, Nullable<System.DateTime> expDate, string desc, Nullable<decimal> amt, Nullable<System.DateTime> posted, Nullable<int> personalCategoryId, Nullable<int> categoryId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("ownerId", ownerId) :
                new ObjectParameter("ownerId", typeof(System.Guid));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(decimal));
    
            var postedParameter = posted.HasValue ?
                new ObjectParameter("posted", posted) :
                new ObjectParameter("posted", typeof(System.DateTime));
    
            var personalCategoryIdParameter = personalCategoryId.HasValue ?
                new ObjectParameter("PersonalCategoryId", personalCategoryId) :
                new ObjectParameter("PersonalCategoryId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExpenseRecord", ownerIdParameter, expDateParameter, descParameter, amtParameter, postedParameter, personalCategoryIdParameter, categoryIdParameter);
        }
    
        public virtual int AddExpPersonalCategories(Nullable<System.Guid> ownerId, string name, Nullable<int> sortorder)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var sortorderParameter = sortorder.HasValue ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExpPersonalCategories", ownerIdParameter, nameParameter, sortorderParameter);
        }
    
        public virtual int addUser(Nullable<System.Guid> id, string email, string password, string firstName, string lastName, Nullable<int> orgId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUser", idParameter, emailParameter, passwordParameter, firstNameParameter, lastNameParameter, orgIdParameter);
        }
    
        public virtual int DeleteExpCategories(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpCategories", idParameter);
        }
    
        public virtual int DeleteExpenseRecord(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpenseRecord", idParameter);
        }
    
        public virtual int DeleteExpPersonalCategories(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpPersonalCategories", idParameter);
        }
    
        public virtual ObjectResult<ExpUser> GetUserByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("GetUserByEmail", emailParameter);
        }
    
        public virtual ObjectResult<ExpUser> GetUserByEmail(string email, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("GetUserByEmail", mergeOption, emailParameter);
        }
    
        public virtual ObjectResult<ExpUser> GetUserById(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("GetUserById", idParameter);
        }
    
        public virtual ObjectResult<ExpUser> GetUserById(Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("GetUserById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<ExpUser> ListAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("ListAllUsers");
        }
    
        public virtual ObjectResult<ExpUser> ListAllUsers(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpUser>("ListAllUsers", mergeOption);
        }
    
        public virtual ObjectResult<ExpCategory> ListExpCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpCategory>("ListExpCategories");
        }
    
        public virtual ObjectResult<ExpCategory> ListExpCategories(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpCategory>("ListExpCategories", mergeOption);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUser(Nullable<System.Guid> ownerid)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUser", owneridParameter);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUser(Nullable<System.Guid> ownerid, MergeOption mergeOption)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUser", mergeOption, owneridParameter);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUserAndDateRange(Nullable<System.Guid> ownerid, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUserAndDateRange", owneridParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUserAndDateRange(Nullable<System.Guid> ownerid, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, MergeOption mergeOption)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUserAndDateRange", mergeOption, owneridParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUserAndNotPosted(Nullable<System.Guid> ownerid)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUserAndNotPosted", owneridParameter);
        }
    
        public virtual ObjectResult<ExpenseRecord> listExpensesForUserAndNotPosted(Nullable<System.Guid> ownerid, MergeOption mergeOption)
        {
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseRecord>("listExpensesForUserAndNotPosted", mergeOption, owneridParameter);
        }
    
        public virtual ObjectResult<ExpPersonalCategory> ListExpPersonalCategories(Nullable<System.Guid> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpPersonalCategory>("ListExpPersonalCategories", ownerIdParameter);
        }
    
        public virtual ObjectResult<ExpPersonalCategory> ListExpPersonalCategories(Nullable<System.Guid> ownerId, MergeOption mergeOption)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpPersonalCategory>("ListExpPersonalCategories", mergeOption, ownerIdParameter);
        }
    
        public virtual ObjectResult<ListUserDetails_Result> ListUserDetails(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListUserDetails_Result>("ListUserDetails", idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<summarizeExp_Result> summarizeExp(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<summarizeExp_Result>("summarizeExp", idParameter);
        }
    
        public virtual int UpdateExpenseRecord(Nullable<int> id, Nullable<System.Guid> ownerId, Nullable<System.DateTime> expDate, string desc, Nullable<decimal> amt, Nullable<System.DateTime> posted, Nullable<int> personalCategoryId, Nullable<int> categoryId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("ownerId", ownerId) :
                new ObjectParameter("ownerId", typeof(System.Guid));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(decimal));
    
            var postedParameter = posted.HasValue ?
                new ObjectParameter("posted", posted) :
                new ObjectParameter("posted", typeof(System.DateTime));
    
            var personalCategoryIdParameter = personalCategoryId.HasValue ?
                new ObjectParameter("PersonalCategoryId", personalCategoryId) :
                new ObjectParameter("PersonalCategoryId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExpenseRecord", idParameter, ownerIdParameter, expDateParameter, descParameter, amtParameter, postedParameter, personalCategoryIdParameter, categoryIdParameter);
        }
    
        public virtual int updateUser(Nullable<System.Guid> id, string email, string password, string firstName, string lastName, Nullable<int> orgId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUser", idParameter, emailParameter, passwordParameter, firstNameParameter, lastNameParameter, orgIdParameter);
        }
    }
}
